DFS Algorithm
The general process of exploring a graph using depth first search includes the following steps:-

Take the input for the adjacency matrix or adjacency list for the graph.
Initialize a stack.
Push the root node (in other words, put the root node into the beginning of the stack).
If the root node has no neighbors, stop here. Else push the leftmost neighboring node which hasn’t already been explored into the stack. Continue this process till a node is encountered which has no neighbors (or whose neighbors have all been added to the stack already) – stop the process then, pop the head, and then continue the process for the node which is popped.
Keep repeating this process till the stack becomes empty.
(If you aren’t familiar with push and pop operations – push adds an element to the top of the stack, while pop removes an element from the top of the stack).

It should be noted that Depth first search in java does not work in a uniform way like Breadth first search, and tracing out a traversal might be harder.

Edge Cases
Now, there’s always the risk that the graph being explored has one or more cycles. This means that there’s a chance of getting back to a node that we have already explored. How do we determine if a node has been explored or not? It’s simple – we simply maintain an array for all the nodes. The array at the beginning of the process will have all of its elements initialized to 0 (or false). Once a node is explored once, the corresponding element in the array will be set to 1 (or true). We simply push nodes to the stack if the value of their corresponding element in the array is 0 (or false).

There’s still another problem to solve. What happens if the graph given is a disconnected graph (meaning that it has multiple connected components instead of a single component)? This would mean that the results obtained would be skewed because all nodes would never be explored. The solution is to iterate through the unexplored nodes and manually use the DFS algorithm to explore each component individually. Of course, this means that one would need to take the help of an array to mark the nodes which have already been explored up to a certain point.